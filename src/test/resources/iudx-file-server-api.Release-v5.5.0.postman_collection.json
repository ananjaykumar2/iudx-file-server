{
	"info": {
		"_postman_id": "7d282b17-8530-4d98-9897-5327695ee365",
		"name": "IUDX-File-Server-APIs-V5.0.0",
		"description": "iudx-file-server-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Token",
			"item": [
				{
					"name": "Get CONSUMER token for accessing an Open Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"openResourceToken\", jsonData.results.accessToken);",
									"postman.setEnvironmentVariable(\"openResourceToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{clientID}}",
								"type": "text"
							},
							{
								"key": "clientSecret",
								"value": "{{clientSecret}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": \"b58da193-23d9-43eb-b98a-a103d4b6103c\",\n  \"itemType\": \"resource\",\n  \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{auth-url}}/{{dxAuthBasePath}}/token",
							"protocol": "https",
							"host": [
								"{{auth-url}}"
							],
							"path": [
								"{{dxAuthBasePath}}",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get CONSUMER token for accessing a Secure Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"secureResourceToken\", jsonData.results.accessToken);",
									"postman.setEnvironmentVariable(\"secureResourceToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{clientID}}",
								"type": "text"
							},
							{
								"key": "clientSecret",
								"value": "{{clientSecret}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\", \n  \"itemType\": \"resource\",\n  \"role\": \"consumer\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{auth-url}}/{{dxAuthBasePath}}/token",
							"protocol": "https",
							"host": [
								"{{auth-url}}"
							],
							"path": [
								"{{dxAuthBasePath}}",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get DELEGATE token for uploading a Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"delegateToken\", jsonData.results.accessToken);",
									"postman.setEnvironmentVariable(\"delegateToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{clientID}}",
								"type": "text"
							},
							{
								"key": "clientSecret",
								"value": "{{clientSecret}}",
								"type": "text"
							},
							{
								"key": "delegationId",
								"value": "{{delegationId}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": \"83c2e5c2-3574-4e11-9530-2b1fbdfce832\", \n  \"itemType\": \"resource\",\n  \"role\": \"delegate\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{auth-url}}/{{dxAuthBasePath}}/token",
							"protocol": "https",
							"host": [
								"{{auth-url}}"
							],
							"path": [
								"{{dxAuthBasePath}}",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get ADMIN token for uploading a Resource/Resource Group",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.environment.set(\"adminToken\", jsonData.results.accessToken);",
									"postman.setEnvironmentVariable(\"adminToken\", jsonData.results.accessToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "clientId",
								"value": "{{clientID}}",
								"type": "text"
							},
							{
								"key": "clientSecret",
								"value": "{{clientSecret}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							},
							{
								"key": "",
								"value": "",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"itemId\": \"rs.iudx.io\", \n  \"itemType\": \"resource_server\",\n  \"role\": \"admin\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{auth-url}}/{{dxAuthBasePath}}/token",
							"protocol": "https",
							"host": [
								"{{auth-url}}"
							],
							"path": [
								"{{dxAuthBasePath}}",
								"token"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "upload",
			"item": [
				{
					"name": "200 (Success) DX file upload - Resource level (sample)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const resultsjsonData = body.results[0];",
									"    pm.expect(body).to.have.property(\"results\");",
									"    pm.expect(resultsjsonData).to.have.property(\"fileId\");",
									"",
									"});",
									"",
									"var jsonData = pm.response.json(); ",
									"pm.environment.set(\"rl_sample\",jsonData.results[0].fileId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{delegateToken}}"
							},
							{
								"key": "",
								"type": "text",
								"value": "",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/home/ubuntu/configs/test.txt"
								},
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832",
									"type": "text"
								},
								{
									"key": "isSample",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/upload",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) DX file upload - Resource level (sample)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"response is 401 (No Token)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body.type).to.equal(\"urn:dx:rs:missingAuthorizationToken\");",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{delegateToken}}",
								"disabled": true
							},
							{
								"key": "fileServerToken",
								"type": "text",
								"value": "fcff7e13-eb2d-4843-a2a2-99eedbf73c12",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/home/ubuntu/configs/test.txt"
								},
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832",
									"type": "text"
								},
								{
									"key": "isSample",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/upload",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (Success) DX file upload - Resource level (Archive)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const resultsjsonData = body.results[0];",
									"    pm.expect(body).to.have.property(\"results\");",
									"    pm.expect(resultsjsonData).to.have.property(\"fileId\");",
									"",
									"});",
									"",
									"var jsonData = pm.response.json(); ",
									"pm.environment.set(\"rl_archive\",jsonData.results[0].fileId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{delegateToken}}"
							},
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/home/ubuntu/configs/test.txt"
								},
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832",
									"type": "text"
								},
								{
									"key": "startTime",
									"value": "2020-09-05T00:00:00Z",
									"type": "text"
								},
								{
									"key": "endTime",
									"value": "2020-09-15T00:00:00Z",
									"type": "text"
								},
								{
									"key": "geometry",
									"value": "point",
									"type": "text"
								},
								{
									"key": "coordinates",
									"value": "[72.81,21.16]",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/upload",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) DX file upload - Resource level (Archive)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"response is 401 (No Token)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body.type).to.equal(\"urn:dx:rs:missingAuthorizationToken\");",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{delegateToken}}",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/home/ubuntu/configs/test.txt"
								},
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832",
									"type": "text"
								},
								{
									"key": "startTime",
									"value": "2020-09-05T00:00:00Z",
									"type": "text"
								},
								{
									"key": "endTime",
									"value": "2020-09-15T00:00:00Z",
									"type": "text"
								},
								{
									"key": "age",
									"value": "10",
									"type": "text"
								},
								{
									"key": "area",
									"value": "surat",
									"type": "text"
								},
								{
									"key": "invalid_metadatafield",
									"value": "abc",
									"type": "text",
									"disabled": true
								},
								{
									"key": "geometry",
									"value": "point",
									"type": "text"
								},
								{
									"key": "coordinates",
									"value": "[72.81,21.16]",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/upload",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (No id param in request) DX file upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 400 (Bad query)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body.type).to.equal(\"urn:dx:rs:invalidPayloadFormat\");",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "authtest.iudx.io/kailash.adhikari@india.nec.com/ebc50279bd4cae670444499fcbf36f32",
								"disabled": true
							},
							{
								"key": "fileServerToken",
								"type": "text",
								"value": "fcff7e13-eb2d-4843-a2a2-99eedbf73c12",
								"disabled": true
							},
							{
								"key": "token",
								"value": "{{delegateToken}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/home/ubuntu/configs/test.txt"
								},
								{
									"key": "id1",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832",
									"type": "text"
								},
								{
									"key": "isSample",
									"value": "true",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/upload",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (Invalid isSample value) DX file upload",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 400 (Bad query)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body.type).to.equal(\"urn:dx:rs:invalidAttributeValue\");",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "authtest.iudx.io/kailash.adhikari@india.nec.com/ebc50279bd4cae670444499fcbf36f32",
								"disabled": true
							},
							{
								"key": "fileServerToken",
								"type": "text",
								"value": "fcff7e13-eb2d-4843-a2a2-99eedbf73c12",
								"disabled": true
							},
							{
								"key": "token",
								"value": "{{delegateToken}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/home/ubuntu/configs/test.txt"
								},
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832",
									"type": "text"
								},
								{
									"key": "isSample",
									"value": "true1",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/upload",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"upload"
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (Success) DX file upload - Resource level (External Storage)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const resultsjsonData = body.results[0];",
									"    pm.expect(body).to.have.property(\"results\");",
									"    pm.expect(resultsjsonData).to.have.property(\"fileId\");",
									"",
									"});",
									"",
									"var jsonData = pm.response.json(); ",
									"pm.environment.set(\"rl_external\",jsonData.results[0].fileId);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "token",
								"type": "text",
								"value": "{{delegateToken}}"
							},
							{
								"key": "externalStorage",
								"value": "true",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": [],
									"disabled": true
								},
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832",
									"type": "text"
								},
								{
									"key": "startTime",
									"value": "2020-09-05T00:00:00Z",
									"type": "text"
								},
								{
									"key": "endTime",
									"value": "2020-09-15T00:00:00Z",
									"type": "text"
								},
								{
									"key": "geometry",
									"value": "point",
									"type": "text"
								},
								{
									"key": "coordinates",
									"value": "[72.81,21.16]",
									"type": "text"
								},
								{
									"key": "file-download-url",
									"value": "https://docs.google.com/document/d/19f6oOIxHVjC3twcRHQATjrEXJsDO0rLixoFgLV7xMxk/edit?usp=sharing",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/upload",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"upload"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "download",
			"item": [
				{
					"name": "200 (Success) DX file download - RL (Sample file )",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{openResourceToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/download?file-id={{rl_sample}}",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"download"
							],
							"query": [
								{
									"key": "file-id",
									"value": "{{rl_sample}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "400 (invalid file id) DX file download",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 400 (Bad query)\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body.type).to.equal(\"urn:dx:rs:invalidAttributeValue\");",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{resourceToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/download?file-id=_abced",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"download"
							],
							"query": [
								{
									"key": "file-id",
									"value": "_abced"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (Success) DX file download -Resource level (Archive file )",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/download?file-id={{rl_archive}}",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"download"
							],
							"query": [
								{
									"key": "file-id",
									"value": "{{rl_archive}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) DX file download - RL (Archive file )",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"response is 401 (No Token)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body.type).to.equal(\"urn:dx:rs:missingAuthorizationToken\");",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{resourceToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/download?file-id=83c2e5c2-3574-4e11-9530-2b1fbdfce832/5e79c456-d6cc-4f45-99c5-4656cbdd9196.txt",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"download"
							],
							"query": [
								{
									"key": "file-id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832/5e79c456-d6cc-4f45-99c5-4656cbdd9196.txt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized)  DX file download -RL (Archive file )",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"response is 401 (No Token)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body.type).to.equal(\"urn:dx:rs:invalidAuthorizationToken\");",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{consumerToken}}",
								"type": "text"
							},
							{
								"key": "token",
								"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NiJ9.eyJzdWIiOiI4NDRlMjUxYi01NzRiLTQ2ZTYtOTI0Ny1mNzZmMWY3MGE2MzciLCJpc3MiOiJhdXRodmVydHguaXVkeC5pbyIsImF1ZCI6InJzLml1ZHfuaW8iLCJleHAiOjE2MzEyMzY3NDEsImlhdCI6MTYzMTE5MzU0MSwiaWlkIjoicmk6aWlzYy5hYy5pbi84OWEzNjI3M2Q3N2RhYzRjZjM4MTE0ZmNhMWJiZTY0MzkyNTQ3Zjg2L3JzLml1ZHguaW8vc3VyYXQtaXRtcy1yZWFsdGltZS1pbmZvcm1hdGlvbi9zdXJhdC1pdG1zLWxpdmUtZXRhIiwicm9sZSI6InByb3ZpZGVyIiwiY29ucyI6e319.bZx1qPtJ9ZF2_VQgkGNzqj4m4aTRGFZ1TXkQqcQhwyRymbwMWHlDFvqLHpnQttNz0Cw_XG5XCsBISN1-gJ6vwQ",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/download?file-id=83c2e5c2-3574-4e11-9530-2b1fbdfce832/5e79c456-d6cc-4f45-99c5-4656cbdd9196.txt",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"download"
							],
							"query": [
								{
									"key": "file-id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832/5e79c456-d6cc-4f45-99c5-4656cbdd9196.txt"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (Not Found) DX file download -Resource level (Archive file )",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 404 (Not found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body.type).to.equal(\"urn:dx:rs:resourceNotFound\");",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/download?file-id=83c2e5c2-3574-4e11-9530-2b1fbdfce832/8185010f-705d-4966-ac44-2050887c68f3_invalid.txt",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"download"
							],
							"query": [
								{
									"key": "file-id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832/8185010f-705d-4966-ac44-2050887c68f3_invalid.txt"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "query",
			"item": [
				{
					"name": "200 (Success) Search for Files of an open resource (using openToken)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"results\");",
									"    pm.expect(body).to.have.property(\"title\",\"urn:dx:rs:success\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{openResourceToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{dxApiBasePath}}/temporal/entities?id=b58da193-23d9-43eb-b98a-a103d4b6103c&time=2020-09-10T00:00:00Z&endTime=2020-09-15T00:00:00Z&timerel=between",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{dxApiBasePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								},
								{
									"key": "time",
									"value": "2020-09-10T00:00:00Z"
								},
								{
									"key": "endTime",
									"value": "2020-09-15T00:00:00Z"
								},
								{
									"key": "timerel",
									"value": "between"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (Success) Search for Files of an open resource group (using openToken)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"results\");",
									"    pm.expect(body).to.have.property(\"title\",\"urn:dx:rs:success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{openResourceToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{dxApiBasePath}}/temporal/entities?id=5b7556b5-0779-4c47-9cf2-3f209779aa22&time=2020-09-10T00:00:00Z&endTime=2020-09-15T00:00:00Z&timerel=between",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{dxApiBasePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "5b7556b5-0779-4c47-9cf2-3f209779aa22"
								},
								{
									"key": "time",
									"value": "2020-09-10T00:00:00Z"
								},
								{
									"key": "endTime",
									"value": "2020-09-15T00:00:00Z"
								},
								{
									"key": "timerel",
									"value": "between"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (Success) Search for Files  of a secure resource (using secureToken)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"results\");",
									"    pm.expect(body).to.have.property(\"title\",\"urn:dx:rs:success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{dxApiBasePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&time=2020-09-10T00:00:00Z&endTime=2020-09-15T00:00:00Z&timerel=between",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{dxApiBasePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "time",
									"value": "2020-09-10T00:00:00Z"
								},
								{
									"key": "endTime",
									"value": "2020-09-15T00:00:00Z"
								},
								{
									"key": "timerel",
									"value": "between"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) Search for Files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"response is 401 (No Token)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body.type).to.equal(\"urn:dx:rs:missingAuthorizationToken\");",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://{{base_url}}/{{dxApiBasePath}}/temporal/entities?id=8b95ab80-2aaf-4636-a65e-7f2563d0d371&time=2020-09-10T00:00:00Z&endTime=2020-09-15T00:00:00Z&timerel=between",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{dxApiBasePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "8b95ab80-2aaf-4636-a65e-7f2563d0d371"
								},
								{
									"key": "time",
									"value": "2020-09-10T00:00:00Z"
								},
								{
									"key": "endTime",
									"value": "2020-09-15T00:00:00Z"
								},
								{
									"key": "timerel",
									"value": "between"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (Success) Search for Files using Spatial [geo(circle)]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"results\");",
									"    pm.expect(body).to.have.property(\"title\",\"urn:dx:rs:success\");",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{dxApiBasePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&georel=near;maxDistance=10000&geometry=point&coordinates=[72.79,21.16]",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{dxApiBasePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=10000"
								},
								{
									"key": "geometry",
									"value": "point"
								},
								{
									"key": "coordinates",
									"value": "[72.79,21.16]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (Success) Search for Files using Spatial [geo(polygon)]",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"results\");",
									"    pm.expect(body).to.have.property(\"title\",\"urn:dx:rs:success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{dxApiBasePath}}/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&georel=within&geometry=polygon&coordinates=[[[72.7815,21.1726],[72.7856,21.1519],[72.807,21.1527],[72.8170,21.1680],[72.800,21.1808],[72.7815,21.1726]]]",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{dxApiBasePath}}",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "georel",
									"value": "within"
								},
								{
									"key": "geometry",
									"value": "polygon"
								},
								{
									"key": "coordinates",
									"value": "[[[72.7815,21.1726],[72.7856,21.1519],[72.807,21.1527],[72.8170,21.1680],[72.800,21.1808],[72.7815,21.1726]]]"
								},
								{
									"key": "abc",
									"value": "123",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (Success) Complex Search [temporal+geo(Circle) search]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"results\");",
									"    pm.expect(body).to.have.property(\"title\",\"urn:dx:rs:success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{dxApiBasePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&time=2020-09-10T00:00:00Z&endTime=2020-09-15T00:00:00Z&timerel=between&georel=near;maxDistance=10000&geometry=point&coordinates=[72.79,21.16]",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{dxApiBasePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "time",
									"value": "2020-09-10T00:00:00Z"
								},
								{
									"key": "endTime",
									"value": "2020-09-15T00:00:00Z"
								},
								{
									"key": "timerel",
									"value": "between"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=10000"
								},
								{
									"key": "geometry",
									"value": "point"
								},
								{
									"key": "coordinates",
									"value": "[72.79,21.16]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) Complex Search [temporal+geo(Circle) search]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"response is 401 (No Token)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body.type).to.equal(\"urn:dx:rs:missingAuthorizationToken\");",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{resourceToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{dxApiBasePath}}/temporal/entities?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832&time=2020-09-10T00:00:00Z&endTime=2020-09-15T00:00:00Z&timerel=between&georel=near;maxDistance=10000&geometry=point&coordinates=[72.79,21.16]",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{dxApiBasePath}}",
								"temporal",
								"entities"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								},
								{
									"key": "time",
									"value": "2020-09-10T00:00:00Z"
								},
								{
									"key": "endTime",
									"value": "2020-09-15T00:00:00Z"
								},
								{
									"key": "timerel",
									"value": "between"
								},
								{
									"key": "georel",
									"value": "near;maxDistance=10000"
								},
								{
									"key": "geometry",
									"value": "point"
								},
								{
									"key": "coordinates",
									"value": "[72.79,21.16]"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (Success) List metadata of an open resource (using openToken)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"results\");",
									"    pm.expect(body).to.have.property(\"title\",\"urn:dx:rs:success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{openResourceToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/list?id=b58da193-23d9-43eb-b98a-a103d4b6103c",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"list"
							],
							"query": [
								{
									"key": "id",
									"value": "b58da193-23d9-43eb-b98a-a103d4b6103c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (Success) List metadata of an open resource group (using openToken)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"results\");",
									"    pm.expect(body).to.have.property(\"title\",\"urn:dx:rs:success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{openResourceToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/list?id=5b7556b5-0779-4c47-9cf2-3f209779aa22",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"list"
							],
							"query": [
								{
									"key": "id",
									"value": "5b7556b5-0779-4c47-9cf2-3f209779aa22"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (Success) List metadata of a secure resource (using secureToken)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body).to.have.property(\"results\");",
									"    pm.expect(body).to.have.property(\"title\",\"urn:dx:rs:success\");",
									"",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{secureResourceToken}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/list?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"list"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "401 (not authorized) List metadata",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"response is 401 (No Token)\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body.type).to.equal(\"urn:dx:rs:missingAuthorizationToken\");",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "token",
								"value": "{{resourceToken}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/list?id=83c2e5c2-3574-4e11-9530-2b1fbdfce832",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"list"
							],
							"query": [
								{
									"key": "id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "delete",
			"item": [
				{
					"name": "200 (Success) DX file delete -RL  (sample file)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const resultsjsonData = body.results[0];",
									"    pm.expect(body).to.have.property(\"results\");",
									"    pm.expect(resultsjsonData).to.have.property(\"detail\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{delegateToken}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/delete?file-id={{rl_sample}}",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"delete"
							],
							"query": [
								{
									"key": "file-id",
									"value": "{{rl_sample}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (Not Found) DX file delete - RL  (sample file)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 404 (Not found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body.type).to.equal(\"urn:dx:rs:resourceNotFound\");",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{delegateToken}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/delete?file-id=83c2e5c2-3574-4e11-9530-2b1fbdfce832/992cad13-6725-42ab-bcee-e4e53fda0.csv",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"delete"
							],
							"query": [
								{
									"key": "file-id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832/992cad13-6725-42ab-bcee-e4e53fda0.csv"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (Success) DX file delete - RL  (Archive file)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const resultsjsonData = body.results[0];",
									"    pm.expect(body).to.have.property(\"results\");",
									"    pm.expect(resultsjsonData).to.have.property(\"detail\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{delegateToken}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/delete?file-id={{rl_archive}}",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"delete"
							],
							"query": [
								{
									"key": "file-id",
									"value": "{{rl_archive}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "404 (Not Found) DX file delete - RL (Archive file)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 404 (Not found)\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    pm.expect(body.type).to.equal(\"urn:dx:rs:resourceNotFound\");",
									"",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{delegateToken}}",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/delete?file-id=83c2e5c2-3574-4e11-9530-2b1fbdfce832/992cad13-6725-42ab-bcee-e4e53fda0.csv",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"delete"
							],
							"query": [
								{
									"key": "file-id",
									"value": "83c2e5c2-3574-4e11-9530-2b1fbdfce832/992cad13-6725-42ab-bcee-e4e53fda0.csv"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "200 (Success) DX file delete - RL  (External Storage)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response is 200 (OK)\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"// Test the response",
									"pm.test(\"Check response body\", function () {    ",
									"    const body = pm.response.json();",
									"    const resultsjsonData = body.results[0];",
									"    pm.expect(body).to.have.property(\"results\");",
									"    pm.expect(resultsjsonData).to.have.property(\"detail\");",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "token",
								"value": "{{delegateToken}}",
								"type": "text"
							},
							{
								"key": "externalStorage",
								"value": "true",
								"type": "text"
							},
							{
								"key": "",
								"value": "",
								"type": "default",
								"disabled": true
							}
						],
						"url": {
							"raw": "https://{{base_url}}/{{iudxApiBasePath}}/delete?file-id={{rl_external}}",
							"protocol": "https",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"{{iudxApiBasePath}}",
								"delete"
							],
							"query": [
								{
									"key": "file-id",
									"value": "{{rl_external}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}